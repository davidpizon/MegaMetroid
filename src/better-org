#include <genesis.h>

#include "../inc/types.h"
#include "../inc/map.h"
#include "../inc/physics.h"
#include "../res/resources.h"

#define SCREEN_WIDTH 256
#define SCREEN_HEIGHT 240

#define ANIM_STAND 0
#define ANIM_WALK 1
#define ANIM_JUMP 2

#define GRAVITY FIX16(0.15)
#define GRAVITY_MAX 3
#define JUMP 5

#define TILEMAP_PLANE BG_A
#define PLAYER_PALETTE PAL1
#define LEVEL_PALETTE PAL0

#define MAX_X 800
#define MAX_Y 256

Player player;
Camera camera;

Map *map;
u16 VDPTilesFilled = TILE_USER_INDEX;
bool active_gravity = TRUE;

// Forwarding functions
static void cameraInit();
static void levelInit();
static void playerInit();
static void setPlayerAnimation(u16 animation);
static void updatePlayer();
static void updatePlayerAnim();
static void updatePlayer();
static void calculateTileCollision();
static void setCameraPosition(s16 x, s16 y);
static void updateCamera();
static void handleInput(u16 joy, u16 changed, u16 state);
static void checkLevelBounds();
static s16 getPlayerFeetPosition();

int main(bool resetType)
{
    VDP_setScreenWidth256();
    SPR_init();
    JOY_init();
    JOY_setEventHandler(&handleInput);

    if (!resetType)
        SYS_hardReset();

    // need to increase a bit DMA buffer size to init both plan tilemap and sprites
    // DMA_setBufferSize(10000);
    // DMA_setMaxTransferSize(10000);

    playerInit();
    levelInit();

    while (1)
    {
        updatePlayer();
        SPR_update();
        SYS_doVBlankProcess();
    }

    return (0);
}

static void cameraInit()
{
    // camera position (force refresh)
    camera.position.x = -1;
    camera.position.y = -1;

    MAP_scrollTo(map, camera.position.x, camera.position.y);
}

static void levelInit()
{
    PAL_setPalette(LEVEL_PALETTE, level_palette.data, DMA);
    VDP_loadTileSet(&level_tileset, VDPTilesFilled, DMA);
    map = MAP_create(&level_map, TILEMAP_PLANE, TILE_ATTR_FULL(LEVEL_PALETTE, FALSE, FALSE, FALSE, VDPTilesFilled));

    // Update the number of tiles filled in order to avoid overlaping them when loading more
    VDPTilesFilled += level_tileset.numTile;

    cameraInit();
}

static void playerInit()
{
    // var * 8
    player.tile_width = 5;
    player.tile_height = 6;

    // initial player position
    player.position.x = 0;
    player.position.y = 0;

    player.velocity.x = 0;
    player.velocity.y = 0;

    player.is_on_floor = FALSE;

    PAL_setPalette(PLAYER_PALETTE, player_sprite.palette->data, DMA);
    player.sprite = SPR_addSprite(
        &player_sprite,
        fix32ToInt(player.position.x) - camera.position.x,
        fix32ToInt(player.position.y) - camera.position.y,
        TILE_ATTR(PLAYER_PALETTE, TRUE, FALSE, FALSE));

    setPlayerAnimation(ANIM_STAND);
}

static void setPlayerAnimation(u16 animation)
{
    SPR_setAnim(player.sprite, animation);
    player.current_animation = animation;
}

static void updatePlayer()
{
    // If is going right
    if (player.control.d_pad.x > 0)
    {
        player.velocity.x = FIX16(2.3);
    }
    // If is going left
    else if (player.control.d_pad.x < 0)
    {
        player.velocity.x = -FIX16(2.3);
    }
    else
    {
        player.velocity.x = 0;
    }

        if (!player.is_on_floor)
        {
            if (player.velocity.y <= 400)
                player.velocity.y += GRAVITY;
        }

    // KLog_S1("is_on_floor= ", player.is_on_floor);

    checkLevelBounds();

    calculateTileCollision();

    SPR_setPosition(player.sprite,
                    player.position.x - camera.position.x,
                    player.position.y - camera.position.y);

    // Update the player animations
    updatePlayerAnim();

    updateCamera();
}

static void calculateTileCollision()
{
    if (!player.velocity.x && !player.velocity.y)
        return;

    s16 x_tile = pixelToTile(player.position.x + fix16ToInt(player.velocity.x));
    s16 y_tile = pixelToTile(player.position.y);

    s16 leftTile = x_tile;
    s16 rightTile = x_tile + player.tile_width;
    s16 topTile = y_tile;
    s16 bottomTile = y_tile + player.tile_height;

    s16 player_right = player.position.x + (tileToPixel(player.tile_width));
    s16 player_feet = getPlayerFeetPosition();

    // active_gravity = false;
    // player.position.x = 174;
    // player.position.y = 154;

    // for (s16 x = leftTile; x <= rightTile; x++)
    // {
    //     for (s16 y = topTile; y <= bottomTile; y++)
    //     {
    //         if (map_collision[y][x] == 0)
    //         {
    //             if (player.velocity.x > 0)
    //             {
    //                 if (player_right > tileToPixel(x))
    //                 {
    //                     player.position.x = (tileToPixel(x)) - (tileToPixel(player.tile_width));
    //                     player.velocity.x = 0;
    //                 }
    //             }
    //             else if (player.velocity.x < 0)
    //             {
    //                 if (player.position.x < (tileToPixel(x)) + 8)
    //                 {
    //                     player.position.x = (tileToPixel(x)) + 8;
    //                     player.velocity.x = 0;
    //                 }
    //             }
    //         }
    //     }
    // }

    player.position.x = 174;
    player.position.y = 0;

    for (s16 x = leftTile; x <= rightTile; x++)
    {
        for (s16 y = topTile; y <= bottomTile; y++)
        {
            if (map_collision[y][x] == 0)
            {
                if (player.velocity.y > 0)
                {
                    if (player_feet > tileToPixel(y))
                    {
                        player.position.y = (tileToPixel(y)) - (tileToPixel(player.tile_height));
                        player.velocity.y = 0;
                        player.is_on_floor = TRUE;
                    }
                }
                else if (player.velocity.y < 0)
                {
                    if (player.position.y < (tileToPixel(y)) + 8)
                    {
                        player.position.y = (tileToPixel(y)) + 8;
                        player.velocity.y = 0;
                    }
                }
            }
        }
    }

    player.position.x += fix16ToInt(player.velocity.x);
    player.position.y += fix16ToInt(player.velocity.y);
}

/*
static void calculateTileCollision()
{
    if (!player.velocity.x && !player.velocity.y) return;

    s16 x_tile = (player.position.x + fix16ToInt(player.velocity.x)) >> 3;
    s16 y_tile = player.position.y >> 3;

    s16 leftTile = x_tile;
    s16 rightTile = x_tile + player.tile_width;
    s16 topTile = y_tile;
    s16 bottomTile = y_tile + player.tile_height;

    s16 player_right = player.position.x + (player.tile_width << 3);
    s16 player_feet = player.position.y + (player.tile_height << 3);

    // for (s16 x = leftTile; x <= rightTile; x++)
    // {
    //     for (s16 y = topTile; y <= bottomTile; y++)
    //     {
    //         if (map_collision[y][x] == 0)
    //         {
    //             if (player.velocity.x > 0)
    //             {
    //                 if (player_right > x << 3)
    //                 {
    //                     player.position.y = (x << 3) - (player.tile_width << 3);
    //                     player.velocity.x = 0;
    //                     player.is_on_floor = TRUE;
    //                 }
    //             }
    //             else if (player.velocity.x < 0)
    //             {
    //                 if (player.position.y < (x << 3) + 8)
    //                 {
    //                     player.position.y = (x << 3) + 8;
    //                     player.velocity.x = 0;
    //                 }
    //             }
    //         }
    //     }
    // }

    y_tile = (player.position.y + fix16ToInt(player.velocity.y)) >> 3;
    topTile = y_tile;
    bottomTile = y_tile + player.tile_height;

    for (s16 x = leftTile; x <= rightTile; x++)
    {
        for (s16 y = topTile; y <= bottomTile; y++)
        {
            if (map_collision[y][x] == 0)
            {
                if (player.velocity.y > 0)
                {
                    if (player_bottom > y << 3)
                    {
                        player.position.y = (y << 3) - (player.tile_height << 3);
                        player.velocity.y = 0;
                        player.is_on_floor = TRUE;
                    }
                }
                else if (player.velocity.y < 0)
                {
                    if (player.position.y < (y << 3) + 8)
                    {
                        player.position.y = (y << 3) + 8;
                        player.velocity.y = 0;
                    }
                }
            }
        }
    }
}
*/

static s16 getPlayerFeetPosition()
{
    return player.position.y + (tileToPixel(player.tile_height));
}

static void checkLevelBounds()
{
    s16 player_feet_pos = getPlayerFeetPosition();

    if (player_feet_pos + fix16ToInt(player.velocity.y) >= SCREEN_HEIGHT)
    {
        player.velocity.y = 0;
        player.position.y = SCREEN_HEIGHT - (tileToPixel(player.tile_height));
        player.is_on_floor = TRUE;
    }
}

static void updatePlayerAnim()
{
    // jumping
    if (!player.is_on_floor)
    {
        setPlayerAnimation(ANIM_JUMP);

        if (player.velocity.x > 0)
        {
            SPR_setHFlip(player.sprite, FALSE);
        }
        else if (player.velocity.x < 0)
        {
            SPR_setHFlip(player.sprite, TRUE);
        }
    }
    else
    {
        if (player.velocity.x > 0)
        {
            setPlayerAnimation(ANIM_WALK);
            SPR_setHFlip(player.sprite, FALSE);
        }
        else if (player.velocity.x < 0)
        {
            setPlayerAnimation(ANIM_WALK);
            SPR_setHFlip(player.sprite, TRUE);
        }
        else
        {
            setPlayerAnimation(ANIM_STAND);
        }
    }
}

static void updateCamera()
{
    s16 new_camera_position_x, new_camera_position_y;

    new_camera_position_x = player.position.x - (SCREEN_WIDTH / 2) + 20;
    new_camera_position_y = player.position.y - (SCREEN_HEIGHT / 2) + 24;

    // Limit camera to screen size
    if (new_camera_position_x < 0)
    {
        new_camera_position_x = 0;
    }
    else if (new_camera_position_x > (MAX_X - SCREEN_WIDTH))
    {
        new_camera_position_x = (MAX_X - SCREEN_WIDTH);
    }

    if (new_camera_position_y < 0)
    {
        new_camera_position_y = 0;
    }
    else if (new_camera_position_y > (MAX_Y - SCREEN_HEIGHT))
    {
        new_camera_position_y = (MAX_Y - SCREEN_HEIGHT);
    }

    // KLog_S1("new_camera_position_y=", new_camera_position_y);

    // set new camera position
    setCameraPosition(new_camera_position_x, new_camera_position_y);
}

static void setCameraPosition(s16 x, s16 y)
{
    if ((x != camera.position.x) || (y != camera.position.y))
    {
        camera.position.x = x;
        camera.position.y = y;

        // scroll maps
        MAP_scrollTo(map, x, y);
    }
}

static void handleInput(u16 joy, u16 changed, u16 state)
{
    if (joy == JOY_1)
    {
        // Update x velocity
        if (state & BUTTON_RIGHT)
        {
            player.control.d_pad.x = 1;
        }
        else if (state & BUTTON_LEFT)
        {
            player.control.d_pad.x = -1;
            KLog_S1("player.control.d_pad.x= ", player.control.d_pad.x);
        }
        else if ((changed & BUTTON_RIGHT) | (changed & BUTTON_LEFT))
        {
            player.control.d_pad.x = 0;
        }

        if (state & BUTTON_C)
        {
            if (player.is_on_floor)
            {
                player.velocity.y = -JUMP;
                player.is_on_floor = FALSE;
            }
        }
    }
}
